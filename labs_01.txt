--------------------------------------------------------------------------------------------------------
Lab 01: Discussion on running postgres on a local machine using regular and container approach
--------------------------------------------------------------------------------------------------------

Download and install:
---------------------
https://www.postgresql.org/download/windows/

Container approach:
-------------------
docker pull postgres:latest
docker exec -it postgres-ZaHO psql -U postgres

--------------------------------------------------------------------------------------------------------
Lab 02: Installation of Docker on Windows
--------------------------------------------------------------------------------------------------------

Part 1:
-------
Installation of WSL:

Step 1: Enable WSL
dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart

Step 2: Check requirements
For x64 systems: Version 1903 or later, with Build 18362 or later.
For ARM64 systems: Version 2004 or later, with Build 19041 or later.

Step 3: Enable Virtual Machine feature
dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
Restart your machine to complete the WSL install and update to WSL 2.

Step 4: Download the Linux Kernel update package
https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi
install this package

Step 5: Set WSL 2 as your default version
wsl --set-default-version 2

Step 6: Install Ubuntu (or any distribution of your choice)
https://aka.ms/wslstore
Search Ubuntu and install
Restart the machine

Part 2:
-------
Visit docker.com and sign-up
Note the Docker ID and do not forget it 

Part 3:
-------
Download and install Docker desktop

Part 4:
-------
In the Docker Desktop, 
Settings -> General -> Use the WSL based engine
Settings -> Resources -> Enable your WSL2 distro and Apply & Restart

Part 5:
-------
Testing the installation and integration
Open your WSL2 app (Ubuntu)
Issue the command: docker, docker version

Part 6:
-------
To test a sample,
Pull postgres sql from the docker desktop
Check if it is downloaded to the cache using the docker ps command

Issue: docker exec -it postgres-ZaHO psql -U postgres
\l on postgres prompt to list databases

Part 7:
-------
Activate the terminal in Visual Studio Code

Complete Reference:
-------------------
https://docs.docker.com/desktop/windows/wsl/

--------------------------------------------------------------------------------------------------------
Lab 03: The docker run command
--------------------------------------------------------------------------------------------------------

Part 1:
-------
Issuing the basic docker run command
docker run hello-world

Analyse the console output

docker run hello-world

Analyse again!

docker run --help -> for help on a specific command

docker images -a -> lists all the images currently present in the repository

-------------------------- Sandeep: Where are the image files?
                                    Do we have manuals on the CLI?


Part 2: Override Features
-------
docker run busybox echo hi there!
docker run busybox ls -l
docker run busybox whoami
docker run busybox top -> shows CPU utilization summary
Note: Everytime you "run" a new busybox (container) is created

Will this work? Justify
docker run hello-world echo hi there!
docker run hello-world ls

Part 3: List running containers
-------

docker ps
docker run busybox echo
docker ps -> doesn't list busybox container because echo will be completed quickly

docker run busybox ping google.com
docker ps -> Observe various things listed

docker ps -all -> list of all containers ever created

docker info -> give the system wide information

Part 4:  Container Lifecycle
--------

docker create hello-world -> produces an ID
docker start -a <id> -> We see the effect of docker run

For listing container ids use docker ps
docker start <id> -> 

Part 5: Restarting stopped containers
----------

docker ps -all
docker run busybox echo hi there
docker ps -all
    -> just because the container stopped, it doesnot mean it is dead or cannot
       be used again

docker start -a <id> -> will restart
It will start with the command with which it was started
Naturally stops after executing the default command
You cannot replace the default command

Try -> docker start -a <id> echo newcommand
Does it work>

Part 6:  Stopping/removing containers
-------- 

docker system prune
docker ps -all -> shows no containers 

Part 7: Logging the outputs
----------

docker create busybox echo hi there
docker start <id>
-> there is no -a options specified
-> This will be expensive because we will have to re-run to see the results on console

docker logs <id> -> gives information with out Restarting

Part 8: Stopping containers
---------

docker create busybox ping google.com

docker start <id>
docker logs <id>

otherwise issue docker start -a <id>

docker ps
    -> continuing, send a signal to stopped

docker stop <id> -> observe docker give 10S and then automatically kills
docker kill <id> -> no grace period here

Part 9: Multi-command Containers
---------

docker run redis

In a separate terminal:
docker ps
docker exec -it 681a726b5e3d redis-cli

Issue redis commands:
ping
set key 78
get key

Part 10: Terminal access
-------------

docker exec -it 681a726b5e3d sh

ls 
ls -l 
mkdir test
ls - later

You can also invoke redis-cli

redis-cli <-

Part 11: Starting with a shell
---------------

docker run -it busybox sh


Part 12: Container isolation
-----------

Terminal 1: docker run -it busybox sh
Create a file/directory inside it

Terminal 2: docker run -it busybox sh
Create a another file/directory inside it

Examine both the containers

Part 13: Removing images and containers
-----------

docker ps -> containers
docker rm <container id> -> to remove container

docker images -> images
docker rmi -f <image name> -> to remove an image

--------------------------------------------------------------------------------------------------------
Lab 06: Complete Setup of MySQL Container
--------------------------------------------------------------------------------------------------------

Step 1: Get the MySQL server docker image
docker pull mysql/mysql-server:latest

Step 2: Start MySQL server in Docker
docker run --name=mysql1 -p 3300:3300 -e MYSQL_ROOT_PASSWORD=123456 -d mysql/mysql-server:8.0

Step 3: Connecting to MySQL server from within container
docker exec -it mysql1 mysql -uroot -p

Step 4: Executing sql
show databases;

Step 5: Stopping the container
docker stop mysql1

Step 6: Removing the container
docker rm mysql1


-------------------------------- Umar: Why -uroot doesn't work for postgres?

--------------------------------------------------------------------------------------------------------
Lab 05: Docker Images
--------------------------------------------------------------------------------------------------------

Part 1: Building a Docker Image
------------

Objective: to create an image that runs redis server

mkdir redis-image
cd redis-image
--------------------------------------------
Invoke VSC: code .

Create a file: Dockerfile

# Use an existing image as the base image
# Download and install dependencies
# Tell the image what to do

FROM alpine
RUN apk add --update redis (not a docker command, apache package manager)
CMD ["redis-server"]

Build-kit enabled bu default.
Preferences -> Docker Engine -> False

--------------------------------------------

docker build .
docker run <id>

Part 2: Observe the docker build process
------------

docker build .
Observe the temporary ids cretaed along the way while build is happening

Part 3: Re-builds from cache
-------------

Add an extra command to install gcc
RUN apk add -update gcc
after redis command

In the second pass,
put that command before redis and observe the results

What do you infer?

Part 4: Tagging the Images
--------------

docker build -t purushotham1982/redis:latest .

Part 5: DOcker commit -> manual configuration
------------

Note: This is not quite often used in the production environment

Terminal: 1

docker run -it alpine sh
# apk add --update redis -> on the shell

Terminal : 2
docker commit -c 'CMD ["redis-server"]' 681a726b5e3d
You get a really long id

You can now run that manually customized container
docker run <just use first few numbers of the id>


